 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/Mie_GUI/GUI.py b/Mie_GUI/GUI.py
index 504ba66a6e33307091a912238f98bdba4b1d3428..3c64844a8ce11d900ec385f9ed810e0b841969b6 100644
--- a/Mie_GUI/GUI.py
+++ b/Mie_GUI/GUI.py
@@ -1,29 +1,30 @@
 import tkinter as tk
 from tkinter import ttk, filedialog, messagebox, colorchooser
-from PIL import Image, ImageTk
+from PIL import Image, ImageTk, ImageOps
 import numpy as np
+import os
 from zoom_utils import enlarge_image
 from cine_utils import CineReader
 import matplotlib
 matplotlib.use('Agg')
 from matplotlib.figure import Figure
 from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
 
 class FrameSelector(tk.Toplevel):
     """Simple viewer to pick a frame from the loaded video."""
 
     def __init__(self, parent):
         super().__init__(parent.master)
         self.parent = parent
         self.reader = parent.reader
         self.current_index = parent.current_index
         self.zoom_factor = 1
 
         self.title("Select Frame")
 
         self._build_ui()
         self.show_frame(self.current_index)
 
     def _build_ui(self):
         ctrl = ttk.Frame(self)
         ctrl.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
diff --git a/Mie_GUI/GUI.py b/Mie_GUI/GUI.py
index 504ba66a6e33307091a912238f98bdba4b1d3428..3c64844a8ce11d900ec385f9ed810e0b841969b6 100644
--- a/Mie_GUI/GUI.py
+++ b/Mie_GUI/GUI.py
@@ -98,90 +99,93 @@ class FrameSelector(tk.Toplevel):
         self.parent.update_image()
         self.destroy()
         
 # ------------------------------------------------------------------
 #                         MAIN ANNOTATOR UI
 # ------------------------------------------------------------------
 class VideoAnnotatorUI:
     def __init__(self, master):
         self.master = master
         master.title("Cine Video Annotator")
 
         # Layout grid positions (col indices)
         self.layout_positions = {
             'load_btn': 0, 'frame_label': 1, 'prev_btn': 2,
             'next_btn': 3, 'select_btn': 4,
             'param_start_col': 1, 'confirm_btn': 13
         }
 
         # Video / data
         self.reader = CineReader()
         self.total_frames = 0
         self.current_index = 0
         self.zoom_factor = 1
         self.orig_img = np.zeros_like  # placeholder for PIL Image
         self.base_rgba = None          # RGBA cached base frame
+        self.display_pad = 1           # extra border for visualization
         # Offsets for panning within the zoomed image
         self.offset_x = 0
         self.offset_y = 0
 
         self.mask = np.zeros_like      # HÃ—W uint8 mask (0/1)
         # Brush settings
         self.brush_color = (255, 0, 0)
         self.alpha_var = tk.IntVar(value=50)
         self.brush_shape = tk.StringVar(value='circle')
         self.brush_size = tk.IntVar(value=10)
         # Processing params dictionary (gain, gamma, etc.)
         self.vars = {}
 
         # Build UI
         self._build_controls(master)
         self._build_content(master)
 
     # ------------------------------------------------------------------
     #                           CONTROL BAR
     # ------------------------------------------------------------------
 
     def _build_controls(self, parent):
         ctrl = ttk.Frame(parent)
         ctrl.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
         lp = self.layout_positions
 
         # Row 0: Load / navigation controls
         self.load_btn = ttk.Button(ctrl, text="Load Video", command=self.load_video)
         self.load_btn.grid(row=0, column=lp['load_btn'], padx=2)
         self.frame_label = ttk.Label(ctrl, text="Frame: 0/0")
         self.frame_label.grid(row=0, column=lp['frame_label'], padx=5)
         self.frame_entry = tk.IntVar(value=1)
         ttk.Entry(ctrl, textvariable=self.frame_entry, width=5).grid(row=0, column=lp['frame_label']+1)
         ttk.Button(ctrl, text="Go", command=self._on_go_frame).grid(row=0, column=lp['frame_label']+2)
         self.prev_btn = ttk.Button(ctrl, text="Prev Frame", command=self.prev_frame, state=tk.DISABLED)
         self.prev_btn.grid(row=0, column=lp['prev_btn'], padx=2)
         self.next_btn = ttk.Button(ctrl, text="Next Frame", command=self.next_frame, state=tk.DISABLED)
         self.next_btn.grid(row=0, column=lp['next_btn'], padx=2)
         self.select_btn = ttk.Button(ctrl, text="Select Frame", command=self.open_frame_selector, state=tk.DISABLED)
         self.select_btn.grid(row=0, column=lp['select_btn'], padx=2)
+        self.export_btn = ttk.Button(ctrl, text="Export Mask", command=self.export_mask, state=tk.DISABLED)
+        self.export_btn.grid(row=0, column=lp['select_btn']+1, padx=2)
 
         # Row 1: Gain/Gamma/Black/White + Apply
         for i,name in enumerate(["Gain","Gamma","Black","White"]):
             ttk.Label(ctrl, text=f"{name}:").grid(
                 row=1, column=lp['param_start_col']+i*2, pady=(5,0))
             v = tk.DoubleVar(value=1.0 if name in ("Gain","Gamma") else 0.0)
             ttk.Entry(ctrl, textvariable=v, width=5).grid(
                 row=1, column=lp['param_start_col']+i*2+1, pady=(5,0))
             self.vars[name.lower()] = v
         self.confirm_btn = ttk.Button(ctrl, text="Apply", command=self.update_image, state=tk.DISABLED)
         self.confirm_btn.grid(row=1, column=lp['confirm_btn'], padx=5, pady=(5,0))
 
         # Row 2: Brush controls
         bc = lp['param_start_col']
         ttk.Label(ctrl, text="Brush:").grid(row=2, column=bc, pady=(5,0))
         ttk.Combobox(ctrl, textvariable=self.brush_shape, values=['circle','square'], width=10)\
             .grid(row=2, column=bc+1, pady=(5,0))
         ttk.Label(ctrl, text="Size:").grid(row=2, column=bc+4, pady=(5,0))
         ttk.Entry(ctrl, textvariable=self.brush_size, width=5).grid(row=2, column=bc+5, pady=(5,0))
         ttk.Button(ctrl, text="Color", command=self.choose_color)\
             .grid(row=2, column=bc+7, padx=(10,0), pady=(5,0))
         ttk.Label(ctrl, text="Alpha:").grid(row=2, column=bc+8, pady=(5,0))
         tk.Scale(ctrl, from_=0, to=255, orient=tk.HORIZONTAL,
                  variable=self.alpha_var, length=100).grid(
             row=2, column=bc+9, pady=(5,0), sticky='w')
diff --git a/Mie_GUI/GUI.py b/Mie_GUI/GUI.py
index 504ba66a6e33307091a912238f98bdba4b1d3428..3c64844a8ce11d900ec385f9ed810e0b841969b6 100644
--- a/Mie_GUI/GUI.py
+++ b/Mie_GUI/GUI.py
@@ -222,149 +226,171 @@ class VideoAnnotatorUI:
         self.ax = self.fig.add_subplot(111)
         self.canvas_hist = FigureCanvasTkAgg(self.fig, master=hf)
         self.canvas_hist.get_tk_widget().grid(row=0, column=0, sticky='nsew')
 
         # Canvas bindings
         self.canvas.bind('<MouseWheel>',    self._on_zoom)
         self.canvas.bind('<Button-4>',      self._on_zoom)
         self.canvas.bind('<Button-5>',      self._on_zoom)
         self.canvas.bind('<B1-Motion>',     lambda e: self._on_paint(e, True))
         self.canvas.bind('<ButtonPress-1>', lambda e: self._on_paint(e, True))
         self.canvas.bind('<B3-Motion>',     lambda e: self._on_paint(e, False))
         self.canvas.bind('<ButtonPress-3>', lambda e: self._on_paint(e, False))
         self.canvas.bind('<Configure>',     lambda e: self._draw_scaled())
     def load_video(self):
         path = filedialog.askopenfilename(filetypes=[('Cine','*.cine')])
         try:
             self.reader.load(path)
         except Exception as e:
             messagebox.showerror('Error', f'Cannot load video:\n{e}')
             return
 
         self.total_frames = self.reader.frame_count
         self.mask = np.zeros((self.reader.height, self.reader.width), dtype=np.uint8)
         self.current_index = 0
         self.mask = np.zeros((self.reader.height, self.reader.width), dtype=np.uint8)
-        for w in (self.prev_btn, self.next_btn, self.confirm_btn, self.select_btn):
+        for w in (self.prev_btn, self.next_btn, self.confirm_btn, self.select_btn, self.export_btn):
             w.config(state=tk.NORMAL)
         self.update_image()
 
     def prev_frame(self):
         if self.current_index>0:
             self.current_index-=1; self.mask = np.zeros_like(self.mask); self.update_image()
 
     def next_frame(self):
         if self.current_index<self.total_frames-1:
             self.current_index+=1; self.mask = np.zeros_like(self.mask); self.update_image()
 
     def update_image(self):
         frame = self.reader.read_frame(self.current_index).astype(np.float32)
         if self.mask is None or self.mask.shape != frame.shape:
             self.mask = np.zeros(frame.shape, dtype=np.uint8)
         g, gm, bl, wh = [self.vars[k].get() for k in ('gain','gamma','black','white')]
         img = frame/4096 * g
         img = np.clip(img,0,1)
         if gm>0 and gm!=1: img=img**gm
         img8 = (img*255).astype(np.uint8)
         if wh>bl and bl>=0:
             img8 = np.clip((img8-bl)*(255/(wh-bl)),0,255).astype(np.uint8)
         self.orig_img = Image.fromarray(img8)
         self.base_rgba = self.orig_img.convert('RGBA')
+        self.base_rgba_pad = ImageOps.expand(
+            self.base_rgba,
+            border=(0, 0, self.display_pad, self.display_pad),
+            fill=(0, 0, 0, 255))
         self.offset_x = 0
         self.offset_y = 0
         self.ax.clear(); self.ax.hist(img8.ravel(),bins=256); self.ax.set_title('Processed Histogram'); self.canvas_hist.draw()
         self._draw_scaled(); self.frame_label.config(text=f"Frame: {self.current_index+1}/{self.total_frames}")
     
     def _update_zoomed_base(self):
         """Cache a zoomed version of the base image for faster drawing."""
         if self.base_rgba is not None:
-            self.scaled_base = enlarge_image(self.base_rgba, int(self.zoom_factor))
+            self.scaled_base = enlarge_image(self.base_rgba_pad, int(self.zoom_factor))
 
     def _draw_scaled(self):
         """Redraw the canvas showing only the visible zoomed region."""
 
         if self.base_rgba is None:
             return
 
         cw, ch = self.canvas.winfo_width(), self.canvas.winfo_height()
-        scaled_w = self.orig_img.width * self.zoom_factor
-        scaled_h = self.orig_img.height * self.zoom_factor
+        scaled_w = (self.orig_img.width + self.display_pad) * self.zoom_factor
+        scaled_h = (self.orig_img.height + self.display_pad) * self.zoom_factor
 
         if cw <= 1 or ch <= 1:
             # Canvas not yet properly sized; draw the whole image
             cw, ch = scaled_w, scaled_h
 
         x0s = int(self.canvas.canvasx(0))
         y0s = int(self.canvas.canvasy(0))
         x1s = min(x0s + cw, scaled_w)
         y1s = min(y0s + ch, scaled_h)
 
         if x1s <= x0s or y1s <= y0s:
             x0s, y0s = 0, 0
             x1s, y1s = scaled_w, scaled_h
 
         x0 = x0s // self.zoom_factor
         y0 = y0s // self.zoom_factor
         x1 = int(np.ceil(x1s / self.zoom_factor))
         y1 = int(np.ceil(y1s / self.zoom_factor))
 
-        base_tile = self.base_rgba.crop((x0, y0, x1, y1))
-        mask_tile = self.mask[y0:y1, x0:x1]
+        base_tile = self.base_rgba_pad.crop((x0, y0, x1, y1))
+        mask_pad = np.pad(self.mask, ((0, self.display_pad), (0, self.display_pad)), constant_values=0)
+        mask_tile = mask_pad[y0:y1, x0:x1]
 
         mask_img = Image.fromarray((mask_tile * 255).astype(np.uint8))
         base_tile = enlarge_image(base_tile, int(self.zoom_factor))
         mask_img = enlarge_image(mask_img, int(self.zoom_factor)).convert('L')
 
         overlay = Image.new('RGBA', mask_img.size,
                             (*self.brush_color, self.alpha_var.get()))
         composited = base_tile.convert('RGBA')
         composited.paste(overlay, (0, 0), mask_img)
 
         self.photo = ImageTk.PhotoImage(composited)
         self.canvas.delete('IMG')
         self.canvas.create_image(x0s, y0s, anchor='nw', image=self.photo, tags='IMG')
         self.canvas.config(scrollregion=(0, 0, scaled_w, scaled_h))
 
     def _scroll_x(self, *args):
         self.canvas.xview(*args)
         self._draw_scaled()
 
     def _scroll_y(self, *args):
         self.canvas.yview(*args)
         self._draw_scaled()
 
     def _on_zoom(self, event):
         """Zoom in or out in integer steps using the mouse wheel."""
         direction = 1 if getattr(event, 'delta', 0) > 0 or getattr(event, 'num', None) == 4 else -1
         self.zoom_factor = max(1, self.zoom_factor + direction)
         self._update_zoomed_base()
         self._draw_scaled()
 
     def _on_paint(self,event,paint=True):
-        x=int(self.canvas.canvasx(event.x)/self.zoom_factor); y=int(self.canvas.canvasy(event.y)/self.zoom_factor)
+        x=int(self.canvas.canvasx(event.x)/self.zoom_factor)
+        y=int(self.canvas.canvasy(event.y)/self.zoom_factor)
+        x=max(0, min(x, self.mask.shape[1]-1))
+        y=max(0, min(y, self.mask.shape[0]-1))
         size=self.brush_size.get()
         if self.brush_shape.get()=='circle':
             yy,xx=np.ogrid[-y:self.mask.shape[0]-y, -x:self.mask.shape[1]-x]; mask_area = xx*xx+yy*yy<=size*size
             self.mask[mask_area] = 1 if paint else 0
         else:
             x0,x1=max(0,x-size),min(self.mask.shape[1],x+size)
             y0,y1=max(0,y-size),min(self.mask.shape[0],y+size)
             self.mask[y0:y1,x0:x1] = 1 if paint else 0
         self._draw_scaled()
     
     def _on_go_frame(self):
         """Jump to a specified frame number from entry box."""
         idx = self.frame_entry.get() - 1
         if 0 <= idx < self.total_frames:
             self.current_index = idx
             self.mask = np.zeros_like(self.mask)
             self.update_image()
 
     def open_frame_selector(self):
         """Open a dialog to choose a frame visually."""
         if self.total_frames:
             FrameSelector(self)
 
+    def export_mask(self):
+        """Save the current mask as .npy and .jpg"""
+        if self.total_frames == 0:
+            messagebox.showerror('Error', 'No video loaded')
+            return
+        file_path = filedialog.asksaveasfilename(defaultextension='.npy',
+                                                 filetypes=[('NumPy file','*.npy')])
+        if not file_path:
+            return
+        np.save(file_path, self.mask)
+        img = Image.fromarray((self.mask * 255).astype(np.uint8))
+        img.save(os.path.splitext(file_path)[0] + '.jpg')
+        messagebox.showinfo('Export', 'Mask exported')
+
 if __name__=='__main__':
     root=tk.Tk(); app=VideoAnnotatorUI(root); root.mainloop()
 
 
 
EOF
)